// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

syntax = "proto3";

option csharp_namespace = "Microsoft.DurableTask.Protobuf.Experimental";
option java_package = "com.microsoft.durabletask.implementation.protobuf.experimental";
option go_package = "/internal/protos/experimental";

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "experimental/common.proto";

// Represents a request to run an orchestration.
message OrchestratorWorkItem {
    OrchestrationId id = 1;
    TaskName name = 2;
    ParentInstance parent = 3;
    google.protobuf.StringValue sub_status = 4;
    map<string, google.protobuf.StringValue> metadata = 5;
}

// A request to begin the history stream.
message OrchestratorStreamRequest {
    OrchestrationId id = 1;
}

// Present for a sub-orchestration.
message ParentInstance {
    int32 scheduled_id = 1; // the ID this orchestrator was scheduled with.
    OrchestrationId id = 2;
    TaskName name = 3;
}

// Orchestrator exection has begun.
message ExecutionStartedEvent {
    google.protobuf.StringValue input = 1;
}

// Orchestrator has completed.
message ExecutionCompletedEvent {
    google.protobuf.StringValue result = 1;
    TaskError error = 2; // Set to indicate failure.
}

// Orchestrator execution has been terminated.
message ExecutionTerminatedEvent {
    google.protobuf.StringValue reason = 1; // A message to go with the termination.
}

// Orchestrator has requested to continue as new.
message ContinueAsNewEvent {
    google.protobuf.StringValue input = 1;
    google.protobuf.StringValue version = 2;
    repeated OrchestratorMessage carry_over_messages = 3;
}

// Orchestrator has been resumed. This marks the boundary between old and new events.
// As in, any events following this event are new.
message ExecutionResumedEvent {
    // no payload.
}

// Notify the client there are no more messages for this orchestration.
message DisconnectEvent {
    // no payload.
}

// Orchestrator has scheduled a task activity.
message TaskActivityScheduledEvent {
    TaskName name = 1;
    google.protobuf.StringValue input = 2;
}

// A scheduled task activity has completed - success or failure.
message TaskActivityCompletedEvent {
    int32 scheduled_id = 1; // TaskActivityScheduledEvent id.
    google.protobuf.StringValue result = 2;
    TaskError error = 3; // Will be set on failure.
}

// Orchestrator has scheduled a sub orchestration.
message SubOrchestrationScheduledEvent {
    TaskName name = 1;
    google.protobuf.StringValue input = 2;
    SubOrchestrationScheduledOptions options = 3;
}

// Options a sub orchestration has been scheduled with.
// If omitted, the hub will use default options.
message SubOrchestrationScheduledOptions {
    google.protobuf.StringValue instance_id = 1; // Generated by hub if omitted.
    bool fire_and_forget = 2; // Will not produce a completed event if true. Default false.
    map<string, google.protobuf.StringValue> metadata = 3; // New metadata to flow to the sub orchestration. Will override inherited metadata on conflict (if any).
    bool inherit_metadata = 4; // True to flow the current orchestration metadata to the sub orchestration.
}

// A scheduled sub orchestration has completed - success or failure.
message SubOrchestrationCompletedEvent {
    int32 scheduled_id = 1; // SubOrchestrationScheduledEvent id.
    google.protobuf.StringValue result = 2;
    TaskError error = 3; // Will be set on failure.
}

// Orchestrator has created a timer for the future.
message TimerCreatedEvent {
    google.protobuf.Timestamp fire_at = 1;
}

// A previously created timer has fired.
message TimerFiredEvent {
    int32 scheduled_id = 1; // TimerCreatedEvent id.
}

// Orchestrator has sent an external event.
message EventSentEvent {
    string instance_id = 1;
    string name = 2;
    google.protobuf.StringValue input = 3;
}

// Orchestrator has received an external event.
message EventRaisedEvent {
    string name = 1;
    google.protobuf.StringValue input = 2;
}

message SetSubStatusEvent {
    google.protobuf.StringValue status = 1;
}

// A generic event to put some opaque payload or marker in the event history.
message GenericEvent {
    string name = 1;
    google.protobuf.StringValue data = 2;
}

message StartStreamEvent {
    string instance_id = 1; // the instance ID to get the orchestration stream for.
}

message OrchestratorMessage {
    int32 id = 1;
    google.protobuf.Timestamp timestamp = 2;
    oneof event {
        ExecutionStartedEvent started = 3;
        ExecutionCompletedEvent completed = 4;
        ExecutionTerminatedEvent terminated = 5;
        ContinueAsNewEvent continued = 6;
        ExecutionResumedEvent resumed = 7;
        TaskActivityScheduledEvent task_scheduled = 8;
        TaskActivityCompletedEvent task_completed = 9;
        SubOrchestrationScheduledEvent orchestration_scheduled = 10;
        SubOrchestrationCompletedEvent orchestration_completed = 11;
        TimerCreatedEvent timer_created = 12;
        TimerFiredEvent timer_fired = 13;
        EventSentEvent event_sent = 14;
        EventRaisedEvent event_raised = 15;
        GenericEvent generic = 16;
        DisconnectEvent disconnect = 17;
    }
}

message OrchestratorAction {
    int32 id = 1;
    oneof event {
        StartStreamEvent start = 2;
        ExecutionCompletedEvent completed = 3;
        ExecutionTerminatedEvent terminated = 4;
        ContinueAsNewEvent continued = 5;
        TaskActivityScheduledEvent task_scheduled = 6;
        SubOrchestrationScheduledEvent orchestration_scheduled = 7;
        TimerCreatedEvent timer_created = 8;
        EventSentEvent event_sent = 9;
        SetSubStatusEvent set_status = 10;
        GenericEvent generic = 11;
    }
}
